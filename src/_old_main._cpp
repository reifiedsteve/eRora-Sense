/***************************************************************************
  This is a library for the BME680 gas, humidity, temperature & pressure sensor

  Designed specifically to work with the Adafruit BME680 Breakout
  ----> http://www.adafruit.com/products/3660

  These sensors use I2C or SPI to communicate, 2 or 4 pins are required
  to interface.

  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing products
  from Adafruit!

  Written by Limor Fried & Kevin Townsend for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
 ***************************************************************************/

#if 1

#define SUPPORT_MQTT_INTERFACE
#define SUPPORT_LCD_DISPLAY

#include <WiFi.h>
#include <Wire.h>
// #include <SPI.h>
// #include <Adafruit_Sensor.h>
// #include "Adafruit_BME680.h"

#include <sstream>
#include <iomanip>

#include <Arduino.h>

#include "Diagnostics/Logging.h"
#include "_Build/Version.h"

// #include "Sensors/LD2410Sensor.h"
// #include "Sensors/PMS7003ParticleSensor.h"

#include "Sensors/EnvironmentLogger.h"

#include "Diagnostics/ScannerI2C.h"
#include "Chronos/CountdownTimer.h"

// #include "Displays/SD1602/CharacterMatrix1602.h"


/*
#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10
*/

#define SEALEVELPRESSURE_HPA (1013.25)

#define LOCAL_SEALEVELPRESSURE_HPA (1027)

// Adafruit_BME680 bme; // I2C
// Adafruit_BME680 bme(BME_CS); // hardware SPI
// Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);



#define DO_I2C_SCAN

#ifdef DO_I2C_SCAN
#include "Diagnostics/ScannerI2C.h"
ScannerI2C scanner;
#endif

#include "SmartSensor.h"
SmartSensor smartSensor;

#ifdef SUPPORT_LCD_DISPLAY
#include "PanelDisplay.h"
PanelDisplay display;
#endif

#ifdef SUPPORT_MQTT_INTERFACE
    #include "MQTTConnection.h"
    #include "MQTTSensorController.h"
    WiFiClient wifi;
    MQTTConnection mqtt(wifi, "192.168.1.186", 1883, "mqtt", "mqtt");
    MQTTSensorController mqttController(smartSensor, TimeSpan::fromMilliseconds(100), mqtt);
#endif

//CharacterMatrix1602 lcd;
// LD2410Sensor personSensor(27);
// PMS7003ParticleSensor pmSensor(16, 17, TimeSpan::fromSeconds(5)); // TODO: make say 10 minutes (to avoid sensor wearing out).

#include "Sensors/EnvironmentLogger.h"
EnvironmentLogger envLogger;

void wifi_setup()
{
    WiFi.begin("133381B", "spongebob2000");

    // Connect to the Wi-Fi network and start the captive portal
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(500);
    }

    Serial.println("WiFi connected.");
}

void setup()
{
    Serial.begin(115200);
    while (!Serial);

    // We don't need crazy speeds, so drop the bus-speed a bit
    // for incresed reliabily and/or longer-wires without issue.

    // Wire.setClock(25000);

    delay(1000);

    #ifdef DO_I2C_SCAN
    scanner.setup();
    delay(1000);
    scanner.loop();
    #endif

    initLogging(LOG_LEVEL_VERBOSE);

    Log.infoln("eRora Sense");

    std::ostringstream os;
    os << "Built: " << BUILD_DATE << " " << BUILD_TIME;
    Log.infoln(os.str().c_str());

    #ifdef SUPPORT_LCD_DISPLAY
        display.setup();
        smartSensor.bindObserver(display);
    #endif

    #ifdef SUPPORT_MQTT_INTERFACE
        mqtt.setup();
        mqttController.setTopicPrefix(MQTTTopic("eRora/sense/test"));
        mqttController.setup();
        smartSensor.bindObserver(mqttController);
    #endif

    smartSensor.bindObserver(envLogger);
    
    delay(500);

    smartSensor.setup();

    delay(500);

    Log.verboseln("Setup complete.");
}

void loop()
{
    smartSensor.loop();

    #ifdef SUPPORT_MQTT_INTERFACE
        mqtt.loop();
        mqttController.loop();
    #endif

    #ifdef SUPPORT_LCD_DISPLAY
        display.loop();
    #endif
}

#endif
